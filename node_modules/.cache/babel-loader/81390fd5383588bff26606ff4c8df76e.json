{"ast":null,"code":"import { connect } from \"react-redux\";\n/*\nФронт работы:\n\n1) Проблема: использование данных redux-store в обычных функциях:\n    Пути:\n        [-] connect(,)() - для React-компонентов => возвращает не функцию, а компонент(компонент обязан возвращать JSX)\n \n    --> [+] Thunk middleware for Redux. \n                It allows writing functions with logic inside that can interact with a \n                Redux store's dispatch and getState methods!\n\n!!!!!!!!!!!!!!!!!!!!!!!!\n    всё, что связанно с Thunk - разобрал, осталось, только применить \n    - см /JS/aboutThunk.js\n!!!!!!!!!!!!!!!!!!!!!!!!\n\n2) style and components lib - для CSS внутри JS\n\n*/\n// sending already filled form to server\n\nasync function Login(loginFormData) {\n  var formdata = new FormData();\n  const {\n    username,\n    password,\n    client_id,\n    client_secret,\n    grant_type\n  } = loginFormData;\n  formdata.append(\"username\", username);\n  formdata.append(\"password\", password);\n  formdata.append(\"client_id\", client_id);\n  formdata.append(\"client_secret\", client_secret);\n  formdata.append(\"grant_type\", grant_type);\n  var requestOptions = {\n    method: 'POST',\n    body: formdata,\n    redirect: 'follow'\n  };\n  let res = await fetch(\"http://server.clerc.ru/api/v2.0/auth/login\", requestOptions).catch(error => console.log('error: ', error));\n  return res.text(); // !!! remember - it`s just 'promise' to be awited in different async function\n} // taking props from Redux-store\n\n\n_c = Login;\n\nconst mapStateToProps = state => {\n  const {\n    loginFormData\n  } = state;\n  return loginFormData;\n}; // ask Redux to give us(Login funtion) Store props and methods to affecr`em\n\n\nexport default connect(mapStateToProps)(Login);\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["connect","Login","loginFormData","formdata","FormData","username","password","client_id","client_secret","grant_type","append","requestOptions","method","body","redirect","res","fetch","catch","error","console","log","text","mapStateToProps","state"],"sources":["/media/credian/d05e4630-b6fb-4cec-b464-e011d52fc682/Job/Clerc_frontend/clerc/src/services/clerc-service.js"],"sourcesContent":["import { connect } from \"react-redux\"\n\n\n\n/*\nФронт работы:\n\n1) Проблема: использование данных redux-store в обычных функциях:\n    Пути:\n        [-] connect(,)() - для React-компонентов => возвращает не функцию, а компонент(компонент обязан возвращать JSX)\n \n    --> [+] Thunk middleware for Redux. \n                It allows writing functions with logic inside that can interact with a \n                Redux store's dispatch and getState methods!\n\n!!!!!!!!!!!!!!!!!!!!!!!!\n    всё, что связанно с Thunk - разобрал, осталось, только применить \n    - см /JS/aboutThunk.js\n!!!!!!!!!!!!!!!!!!!!!!!!\n\n2) style and components lib - для CSS внутри JS\n\n*/\n\n\n// sending already filled form to server\nasync function Login( loginFormData ) {\n    var formdata = new FormData();\n\n    const {\n        username,\n        password,\n        client_id, \n        client_secret,\n        grant_type     } = loginFormData\n\n    formdata.append(\"username\", username);\n    formdata.append(\"password\", password);\n    formdata.append(\"client_id\", client_id);\n    formdata.append(\"client_secret\", client_secret);\n    formdata.append(\"grant_type\", grant_type);\n\n    var requestOptions = {\n      method: 'POST',\n      body: formdata,\n      redirect: 'follow'\n    }\n\n\n    let res = await fetch(\"http://server.clerc.ru/api/v2.0/auth/login\", requestOptions)\n                        .catch((error) => console.log('error: ', error))\n                        \n    return res.text();          // !!! remember - it`s just 'promise' to be awited in different async function\n}\n\n\n// taking props from Redux-store\nconst mapStateToProps = (state) => {\n    const {loginFormData} = state\n    return loginFormData\n}\n\n\n// ask Redux to give us(Login funtion) Store props and methods to affecr`em\n\nexport default connect(mapStateToProps)(Login)\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AACA,eAAeC,KAAf,CAAsBC,aAAtB,EAAsC;EAClC,IAAIC,QAAQ,GAAG,IAAIC,QAAJ,EAAf;EAEA,MAAM;IACFC,QADE;IAEFC,QAFE;IAGFC,SAHE;IAIFC,aAJE;IAKFC;EALE,IAKiBP,aALvB;EAOAC,QAAQ,CAACO,MAAT,CAAgB,UAAhB,EAA4BL,QAA5B;EACAF,QAAQ,CAACO,MAAT,CAAgB,UAAhB,EAA4BJ,QAA5B;EACAH,QAAQ,CAACO,MAAT,CAAgB,WAAhB,EAA6BH,SAA7B;EACAJ,QAAQ,CAACO,MAAT,CAAgB,eAAhB,EAAiCF,aAAjC;EACAL,QAAQ,CAACO,MAAT,CAAgB,YAAhB,EAA8BD,UAA9B;EAEA,IAAIE,cAAc,GAAG;IACnBC,MAAM,EAAE,MADW;IAEnBC,IAAI,EAAEV,QAFa;IAGnBW,QAAQ,EAAE;EAHS,CAArB;EAOA,IAAIC,GAAG,GAAG,MAAMC,KAAK,CAAC,4CAAD,EAA+CL,cAA/C,CAAL,CACKM,KADL,CACYC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,KAAvB,CADtB,CAAhB;EAGA,OAAOH,GAAG,CAACM,IAAJ,EAAP,CA1BkC,CA0BN;AAC/B,C,CAGD;;;KA9BepB,K;;AA+Bf,MAAMqB,eAAe,GAAIC,KAAD,IAAW;EAC/B,MAAM;IAACrB;EAAD,IAAkBqB,KAAxB;EACA,OAAOrB,aAAP;AACH,CAHD,C,CAMA;;;AAEA,eAAeF,OAAO,CAACsB,eAAD,CAAP,CAAyBrB,KAAzB,CAAf"},"metadata":{},"sourceType":"module"}