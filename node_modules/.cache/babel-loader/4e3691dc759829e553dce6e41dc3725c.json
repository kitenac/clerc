{"ast":null,"code":"import { connect } from \"react-redux\"; // sending already filled form to server\n\nasync function Login() {\n  var formdata = new FormData();\n  formdata.append(\"username\", \"admin@ship.ru\");\n  formdata.append(\"password\", \"secret2\");\n  formdata.append(\"client_id\", \"1\");\n  formdata.append(\"client_secret\", \"c75IGwuqkjrO1RWCE4Ntn4zqpQdpgnEO2wGT9iMT\");\n  formdata.append(\"grant_type\", \"password\");\n  var requestOptions = {\n    method: 'POST',\n    body: formdata,\n    redirect: 'follow'\n  };\n  let res = await fetch(\"http://server.clerc.ru/api/v2.0/auth/login\", requestOptions).catch(error => console.log('error: ', error));\n  return res.text(); // !!! remember - it`s just 'promise' to be awited in different async function\n} // make format api-key outta response\n\n\n_c = Login;\n\nconst getApiKey = response => {\n  const jwt = JSON.parse(response).access_token;\n  return 'Bearer ' + jwt;\n}; // requesting all contracts.  to be used in async function \n\n\nasync function getContracts(apiKey) {\n  let requestOptions = {\n    method: 'GET',\n    redirect: 'follow',\n    headers: {\n      Authorization: apiKey\n    }\n  }; // ALERT: в доке этого нет => может измениться, когда бэк перепишут как параметр, так и URI\n\n  const GET_param = 'order=position';\n  let res = await fetch(`http://server.clerc.ru/api/v2.0/contracts?${GET_param}`, requestOptions).then(response => response.text()).then(result => result).catch(error => console.log('error', error));\n  return JSON.parse(res); // UNICODE decoding and converting to object by .parse\n} // taking props from Redux-store\n\n\nconst mapStateToProps = state => {\n  const {\n    loginFormData\n  } = state;\n  return loginFormData;\n}; // ask Redux to give us(Login funtion) Store props and methods to affecr`em\n\n\nexport default connect(mapStateToProps)(Login);\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["connect","Login","formdata","FormData","append","requestOptions","method","body","redirect","res","fetch","catch","error","console","log","text","getApiKey","response","jwt","JSON","parse","access_token","getContracts","apiKey","headers","Authorization","GET_param","then","result","mapStateToProps","state","loginFormData"],"sources":["/media/credian/d05e4630-b6fb-4cec-b464-e011d52fc682/Job/Clerc_frontend/clerc/src/services/clerc-service.js"],"sourcesContent":["import { connect } from \"react-redux\"\n\n\n\n// sending already filled form to server\nasync function Login() {\n    var formdata = new FormData();\n    formdata.append(\"username\", \"admin@ship.ru\");\n    formdata.append(\"password\", \"secret2\");\n    formdata.append(\"client_id\", \"1\");\n    formdata.append(\"client_secret\", \"c75IGwuqkjrO1RWCE4Ntn4zqpQdpgnEO2wGT9iMT\");\n    formdata.append(\"grant_type\", \"password\");\n\n    var requestOptions = {\n      method: 'POST',\n      body: formdata,\n      redirect: 'follow'\n    }\n\n\n    let res = await fetch(\"http://server.clerc.ru/api/v2.0/auth/login\", requestOptions)\n                        .catch((error) => console.log('error: ', error))\n                        \n    return res.text();          // !!! remember - it`s just 'promise' to be awited in different async function\n}\n\n// make format api-key outta response\nconst getApiKey = (response) => {\n    const jwt = JSON.parse(response).access_token\n    return 'Bearer ' + jwt\n}\n\n// requesting all contracts.  to be used in async function \nasync function getContracts(apiKey){\n    let requestOptions = {\n        method: 'GET',\n        redirect: 'follow',\n        headers: {\n            Authorization: apiKey }\n    }\n    \n\n    // ALERT: в доке этого нет => может измениться, когда бэк перепишут как параметр, так и URI\n    const GET_param = 'order=position'\n\n    let res = await fetch(`http://server.clerc.ru/api/v2.0/contracts?${GET_param}`, requestOptions)\n      .then(response => response.text())\n      .then(result => result)\n      .catch(error => console.log('error', error))\n\n    return JSON.parse(res)      // UNICODE decoding and converting to object by .parse\n}\n\n\n// taking props from Redux-store\nconst mapStateToProps = (state) => {\n    const {loginFormData} = state\n    return loginFormData\n}\n\n\n// ask Redux to give us(Login funtion) Store props and methods to affecr`em\nexport default connect(mapStateToProps)(Login);\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB,C,CAIA;;AACA,eAAeC,KAAf,GAAuB;EACnB,IAAIC,QAAQ,GAAG,IAAIC,QAAJ,EAAf;EACAD,QAAQ,CAACE,MAAT,CAAgB,UAAhB,EAA4B,eAA5B;EACAF,QAAQ,CAACE,MAAT,CAAgB,UAAhB,EAA4B,SAA5B;EACAF,QAAQ,CAACE,MAAT,CAAgB,WAAhB,EAA6B,GAA7B;EACAF,QAAQ,CAACE,MAAT,CAAgB,eAAhB,EAAiC,0CAAjC;EACAF,QAAQ,CAACE,MAAT,CAAgB,YAAhB,EAA8B,UAA9B;EAEA,IAAIC,cAAc,GAAG;IACnBC,MAAM,EAAE,MADW;IAEnBC,IAAI,EAAEL,QAFa;IAGnBM,QAAQ,EAAE;EAHS,CAArB;EAOA,IAAIC,GAAG,GAAG,MAAMC,KAAK,CAAC,4CAAD,EAA+CL,cAA/C,CAAL,CACKM,KADL,CACYC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,KAAvB,CADtB,CAAhB;EAGA,OAAOH,GAAG,CAACM,IAAJ,EAAP,CAlBmB,CAkBS;AAC/B,C,CAED;;;KArBed,K;;AAsBf,MAAMe,SAAS,GAAIC,QAAD,IAAc;EAC5B,MAAMC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWH,QAAX,EAAqBI,YAAjC;EACA,OAAO,YAAYH,GAAnB;AACH,CAHD,C,CAKA;;;AACA,eAAeI,YAAf,CAA4BC,MAA5B,EAAmC;EAC/B,IAAIlB,cAAc,GAAG;IACjBC,MAAM,EAAE,KADS;IAEjBE,QAAQ,EAAE,QAFO;IAGjBgB,OAAO,EAAE;MACLC,aAAa,EAAEF;IADV;EAHQ,CAArB,CAD+B,CAS/B;;EACA,MAAMG,SAAS,GAAG,gBAAlB;EAEA,IAAIjB,GAAG,GAAG,MAAMC,KAAK,CAAE,6CAA4CgB,SAAU,EAAxD,EAA2DrB,cAA3D,CAAL,CACbsB,IADa,CACRV,QAAQ,IAAIA,QAAQ,CAACF,IAAT,EADJ,EAEbY,IAFa,CAERC,MAAM,IAAIA,MAFF,EAGbjB,KAHa,CAGPC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB,CAHF,CAAhB;EAKA,OAAOO,IAAI,CAACC,KAAL,CAAWX,GAAX,CAAP,CAjB+B,CAiBH;AAC/B,C,CAGD;;;AACA,MAAMoB,eAAe,GAAIC,KAAD,IAAW;EAC/B,MAAM;IAACC;EAAD,IAAkBD,KAAxB;EACA,OAAOC,aAAP;AACH,CAHD,C,CAMA;;;AACA,eAAe/B,OAAO,CAAC6B,eAAD,CAAP,CAAyB5B,KAAzB,CAAf"},"metadata":{},"sourceType":"module"}