{"ast":null,"code":"// To call reducer`s 'api' we need to call  store.dispatch( {type: ACTION_NAME} )\n// so here we served action {type: ACTION_NAME} for each api`s function\nexport const input_username = username => ({\n  type: 'INPUT_USER',\n  payload: username\n});\nexport const input_password = password => ({\n  type: 'INPUT_PSWD',\n  payload: password\n});\nexport const input_rest = rest => ({\n  type: 'INPUT_REST',\n  payload: rest\n});\nexport const update_token = token => ({\n  type: 'UPDATE_TOKEN',\n  payload: token\n});\nexport const add_contracts = contracts => ({\n  type: 'ADD_CONTRACTS',\n  payload: contracts\n}); // Login is the \"thunk action creator\":\n\nexport function Login() {\n  // thunk itself: can be anonymous\n  return async function LoginThunk(dispatch, getState) {\n    var formdata = new FormData();\n    const loginFormData = getState().loginFormData;\n    const {\n      username,\n      password,\n      client_id,\n      client_secret,\n      grant_type\n    } = loginFormData;\n    formdata.append(\"username\", username);\n    formdata.append(\"password\", password);\n    formdata.append(\"client_id\", client_id);\n    formdata.append(\"client_secret\", client_secret);\n    formdata.append(\"grant_type\", grant_type);\n    var requestOptions = {\n      method: 'POST',\n      body: formdata,\n      redirect: 'follow'\n    };\n    let res = await fetch(\"http://server.clerc.ru/api/v2.0/auth/login\", requestOptions).catch(error => console.log('error: ', error));\n    return res.text(); // !!! remember - it`s just 'promise' to be awited in different async function\n  };\n}\n_c = Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["input_username","username","type","payload","input_password","password","input_rest","rest","update_token","token","add_contracts","contracts","Login","LoginThunk","dispatch","getState","formdata","FormData","loginFormData","client_id","client_secret","grant_type","append","requestOptions","method","body","redirect","res","fetch","catch","error","console","log","text"],"sources":["/media/credian/d05e4630-b6fb-4cec-b464-e011d52fc682/Job/Clerc_frontend/clerc/src/actions.js"],"sourcesContent":["\n// To call reducer`s 'api' we need to call  store.dispatch( {type: ACTION_NAME} )\n// so here we served action {type: ACTION_NAME} for each api`s function\n\n\nexport const input_username = (username)   =>  ({type: 'INPUT_USER', payload: username })\nexport const input_password = (password)   =>  ({type: 'INPUT_PSWD', payload: password }) \nexport const input_rest     = (rest)       =>  ({type: 'INPUT_REST', payload: rest} )\n\nexport const update_token   = (token)      =>  ({type: 'UPDATE_TOKEN', payload: token}) \n\nexport const add_contracts  = (contracts)  =>  ({type: 'ADD_CONTRACTS', payload: contracts})\n\n\n// Login is the \"thunk action creator\":\nexport function Login() {\n    // thunk itself: can be anonymous\n    return async function LoginThunk(dispatch, getState) {\n            var formdata = new FormData();\n\n            const loginFormData = getState().loginFormData\n\n\n            const {\n                username,\n                password,\n                client_id, \n                client_secret,\n                grant_type     } = loginFormData\n        \n            formdata.append(\"username\", username);\n            formdata.append(\"password\", password);\n            formdata.append(\"client_id\", client_id);\n            formdata.append(\"client_secret\", client_secret);\n            formdata.append(\"grant_type\", grant_type);\n        \n            var requestOptions = {\n              method: 'POST',\n              body: formdata,\n              redirect: 'follow'\n            }\n        \n        \n            let res = await fetch(\"http://server.clerc.ru/api/v2.0/auth/login\", requestOptions)\n                                .catch((error) => console.log('error: ', error))\n                                \n            return res.text();          // !!! remember - it`s just 'promise' to be awited in different async function\n    }\n  }\n  \n  "],"mappings":"AACA;AACA;AAGA,OAAO,MAAMA,cAAc,GAAIC,QAAD,KAAkB;EAACC,IAAI,EAAE,YAAP;EAAqBC,OAAO,EAAEF;AAA9B,CAAlB,CAAvB;AACP,OAAO,MAAMG,cAAc,GAAIC,QAAD,KAAkB;EAACH,IAAI,EAAE,YAAP;EAAqBC,OAAO,EAAEE;AAA9B,CAAlB,CAAvB;AACP,OAAO,MAAMC,UAAU,GAAQC,IAAD,KAAkB;EAACL,IAAI,EAAE,YAAP;EAAqBC,OAAO,EAAEI;AAA9B,CAAlB,CAAvB;AAEP,OAAO,MAAMC,YAAY,GAAMC,KAAD,KAAkB;EAACP,IAAI,EAAE,cAAP;EAAuBC,OAAO,EAAEM;AAAhC,CAAlB,CAAvB;AAEP,OAAO,MAAMC,aAAa,GAAKC,SAAD,KAAkB;EAACT,IAAI,EAAE,eAAP;EAAwBC,OAAO,EAAEQ;AAAjC,CAAlB,CAAvB,C,CAGP;;AACA,OAAO,SAASC,KAAT,GAAiB;EACpB;EACA,OAAO,eAAeC,UAAf,CAA0BC,QAA1B,EAAoCC,QAApC,EAA8C;IAC7C,IAAIC,QAAQ,GAAG,IAAIC,QAAJ,EAAf;IAEA,MAAMC,aAAa,GAAGH,QAAQ,GAAGG,aAAjC;IAGA,MAAM;MACFjB,QADE;MAEFI,QAFE;MAGFc,SAHE;MAIFC,aAJE;MAKFC;IALE,IAKiBH,aALvB;IAOAF,QAAQ,CAACM,MAAT,CAAgB,UAAhB,EAA4BrB,QAA5B;IACAe,QAAQ,CAACM,MAAT,CAAgB,UAAhB,EAA4BjB,QAA5B;IACAW,QAAQ,CAACM,MAAT,CAAgB,WAAhB,EAA6BH,SAA7B;IACAH,QAAQ,CAACM,MAAT,CAAgB,eAAhB,EAAiCF,aAAjC;IACAJ,QAAQ,CAACM,MAAT,CAAgB,YAAhB,EAA8BD,UAA9B;IAEA,IAAIE,cAAc,GAAG;MACnBC,MAAM,EAAE,MADW;MAEnBC,IAAI,EAAET,QAFa;MAGnBU,QAAQ,EAAE;IAHS,CAArB;IAOA,IAAIC,GAAG,GAAG,MAAMC,KAAK,CAAC,4CAAD,EAA+CL,cAA/C,CAAL,CACKM,KADL,CACYC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,KAAvB,CADtB,CAAhB;IAGA,OAAOH,GAAG,CAACM,IAAJ,EAAP,CA7B6C,CA6BjB;EACnC,CA9BD;AA+BD;KAjCarB,K"},"metadata":{},"sourceType":"module"}