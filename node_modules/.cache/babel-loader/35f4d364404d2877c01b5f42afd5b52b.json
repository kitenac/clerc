{"ast":null,"code":"import { connect } from \"react-redux\";\n\nconst getApiKey = response => {\n  const jwt = JSON.parse(response).access_token;\n  console.log('jwt: ', jwt);\n  const body = JSON.parse(atob(token.split('.')[1])); // 0-th - header, 1-st - body - what we need , 2-st - sig\n\n  const jti = body.jti;\n  return jti;\n}; // sending already filled form to server\n\n\nconst Login = _ref => {\n  let {\n    loginFormData\n  } = _ref;\n  console.log('hello from Login(), formData is: ', loginFormData);\n  const {\n    username,\n    password,\n    client_id,\n    client_secret,\n    grant_type\n  } = loginFormData;\n  let formdata = new FormData();\n  formdata.append(\"username\", username);\n  formdata.append(\"password\", password);\n  formdata.append(\"client_id\", client_id);\n  formdata.append(\"client_secret\", client_secret);\n  formdata.append(\"grant_type\", grant_type);\n  let requestOptions = {\n    method: 'POST',\n    body: formdata,\n    redirect: 'follow'\n  };\n  return fetch(\"http://server.clerc.ru/api/v2.0/auth/login\", requestOptions).then(response => response.text()).then(result => console.log('on login response', result)).catch(error => console.log('error', error));\n}; // see documentation \n\n\n_c = Login;\n\nconst getContract = () => {}; // taking props from Redux-store\n\n\nconst mapStateToProps = state => {\n  const {\n    loginFormData\n  } = state;\n  return loginFormData;\n}; // ask Redux to give us(Login funtion) Store props and methods to affecr`em\n\n\nexport default connect(mapStateToProps)(Login);\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["connect","getApiKey","response","jwt","JSON","parse","access_token","console","log","body","atob","token","split","jti","Login","loginFormData","username","password","client_id","client_secret","grant_type","formdata","FormData","append","requestOptions","method","redirect","fetch","then","text","result","catch","error","getContract","mapStateToProps","state"],"sources":["/media/credian/d05e4630-b6fb-4cec-b464-e011d52fc682/Job/Clerc_frontend/clerc/src/services/clerc-service.js"],"sourcesContent":["import { connect } from \"react-redux\"\n\n\nconst getApiKey = (response) => {\n    const jwt = JSON.parse(response).access_token;\n    console.log('jwt: ', jwt)\n    \n    const body = JSON.parse(atob(token.split('.')[1])); // 0-th - header, 1-st - body - what we need , 2-st - sig\n    const jti = body.jti\n    return jti\n}\n\n\n// sending already filled form to server\nconst Login = ({loginFormData}) => {\n\n    console.log('hello from Login(), formData is: ', loginFormData)\n\n    const {\n        username,\n        password,\n        client_id, \n        client_secret,\n        grant_type }   = loginFormData\n\n    let formdata = new FormData()\n    formdata.append(\"username\", username)\n    formdata.append(\"password\", password)\n    formdata.append(\"client_id\", client_id)\n    formdata.append(\"client_secret\", client_secret)\n    formdata.append(\"grant_type\", grant_type)\n\n    let requestOptions = {\n      method: 'POST',\n      body: formdata,\n      redirect: 'follow'\n    }\n\n\n    return fetch(\"http://server.clerc.ru/api/v2.0/auth/login\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log('on login response',result))\n        .catch(error => console.log('error', error))\n\n}\n\n\n// see documentation \nconst getContract = () => {\n\n}\n\n// taking props from Redux-store\nconst mapStateToProps = (state) => {\n    const {loginFormData} = state\n    return loginFormData\n}\n\n\n// ask Redux to give us(Login funtion) Store props and methods to affecr`em\nexport default connect(mapStateToProps)(Login);\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;;AAGA,MAAMC,SAAS,GAAIC,QAAD,IAAc;EAC5B,MAAMC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWH,QAAX,EAAqBI,YAAjC;EACAC,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBL,GAArB;EAEA,MAAMM,IAAI,GAAGL,IAAI,CAACC,KAAL,CAAWK,IAAI,CAACC,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAD,CAAf,CAAb,CAJ4B,CAIwB;;EACpD,MAAMC,GAAG,GAAGJ,IAAI,CAACI,GAAjB;EACA,OAAOA,GAAP;AACH,CAPD,C,CAUA;;;AACA,MAAMC,KAAK,GAAG,QAAqB;EAAA,IAApB;IAACC;EAAD,CAAoB;EAE/BR,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDO,aAAjD;EAEA,MAAM;IACFC,QADE;IAEFC,QAFE;IAGFC,SAHE;IAIFC,aAJE;IAKFC;EALE,IAKeL,aALrB;EAOA,IAAIM,QAAQ,GAAG,IAAIC,QAAJ,EAAf;EACAD,QAAQ,CAACE,MAAT,CAAgB,UAAhB,EAA4BP,QAA5B;EACAK,QAAQ,CAACE,MAAT,CAAgB,UAAhB,EAA4BN,QAA5B;EACAI,QAAQ,CAACE,MAAT,CAAgB,WAAhB,EAA6BL,SAA7B;EACAG,QAAQ,CAACE,MAAT,CAAgB,eAAhB,EAAiCJ,aAAjC;EACAE,QAAQ,CAACE,MAAT,CAAgB,YAAhB,EAA8BH,UAA9B;EAEA,IAAII,cAAc,GAAG;IACnBC,MAAM,EAAE,MADW;IAEnBhB,IAAI,EAAEY,QAFa;IAGnBK,QAAQ,EAAE;EAHS,CAArB;EAOA,OAAOC,KAAK,CAAC,4CAAD,EAA+CH,cAA/C,CAAL,CACFI,IADE,CACG1B,QAAQ,IAAIA,QAAQ,CAAC2B,IAAT,EADf,EAEFD,IAFE,CAEGE,MAAM,IAAIvB,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAgCsB,MAAhC,CAFb,EAGFC,KAHE,CAGIC,KAAK,IAAIzB,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBwB,KAArB,CAHb,CAAP;AAKH,CA9BD,C,CAiCA;;;KAjCMlB,K;;AAkCN,MAAMmB,WAAW,GAAG,MAAM,CAEzB,CAFD,C,CAIA;;;AACA,MAAMC,eAAe,GAAIC,KAAD,IAAW;EAC/B,MAAM;IAACpB;EAAD,IAAkBoB,KAAxB;EACA,OAAOpB,aAAP;AACH,CAHD,C,CAMA;;;AACA,eAAef,OAAO,CAACkC,eAAD,CAAP,CAAyBpB,KAAzB,CAAf"},"metadata":{},"sourceType":"module"}