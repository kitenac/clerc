{"ast":null,"code":"// make format api-key outta response\nconst getApiKey = response => {\n  const jwt = JSON.parse(response).access_token;\n  return 'Bearer ' + jwt;\n}; // requesting all contracts.  to be used in async function \n\n\nasync function getContracts(apiKey) {\n  let requestOptions = {\n    method: 'GET',\n    redirect: 'follow',\n    headers: {\n      Authorization: apiKey\n    }\n  }; // ALERT: в доке этого нет => может измениться, когда бэк перепишут как параметр, так и URI\n\n  const GET_param = 'order=position';\n  let res = await fetch(`http://server.clerc.ru/api/v2.0/contracts?${GET_param}`, requestOptions).then(response => response.text()).then(result => result).catch(error => console.log('error', error));\n  return JSON.parse(res); // UNICODE decoding and converting to object by .parse\n}\n\nexport { getApiKey, getContracts };","map":{"version":3,"names":["getApiKey","response","jwt","JSON","parse","access_token","getContracts","apiKey","requestOptions","method","redirect","headers","Authorization","GET_param","res","fetch","then","text","result","catch","error","console","log"],"sources":["/media/credian/d05e4630-b6fb-4cec-b464-e011d52fc682/Job/Clerc_frontend/clerc/src/services/request-utils.js"],"sourcesContent":["\n// make format api-key outta response\nconst getApiKey = (response) => {\n    const jwt = JSON.parse(response).access_token\n    return 'Bearer ' + jwt\n}\n\n// requesting all contracts.  to be used in async function \nasync function getContracts(apiKey){\n    let requestOptions = {\n        method: 'GET',\n        redirect: 'follow',\n        headers: {\n            Authorization: apiKey }\n    }\n    \n\n    // ALERT: в доке этого нет => может измениться, когда бэк перепишут как параметр, так и URI\n    const GET_param = 'order=position'\n\n    let res = await fetch(`http://server.clerc.ru/api/v2.0/contracts?${GET_param}`, requestOptions)\n      .then(response => response.text())\n      .then(result => result)\n      .catch(error => console.log('error', error))\n\n    return JSON.parse(res)      // UNICODE decoding and converting to object by .parse\n}\n\nexport {getApiKey, getContracts}"],"mappings":"AACA;AACA,MAAMA,SAAS,GAAIC,QAAD,IAAc;EAC5B,MAAMC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWH,QAAX,EAAqBI,YAAjC;EACA,OAAO,YAAYH,GAAnB;AACH,CAHD,C,CAKA;;;AACA,eAAeI,YAAf,CAA4BC,MAA5B,EAAmC;EAC/B,IAAIC,cAAc,GAAG;IACjBC,MAAM,EAAE,KADS;IAEjBC,QAAQ,EAAE,QAFO;IAGjBC,OAAO,EAAE;MACLC,aAAa,EAAEL;IADV;EAHQ,CAArB,CAD+B,CAS/B;;EACA,MAAMM,SAAS,GAAG,gBAAlB;EAEA,IAAIC,GAAG,GAAG,MAAMC,KAAK,CAAE,6CAA4CF,SAAU,EAAxD,EAA2DL,cAA3D,CAAL,CACbQ,IADa,CACRf,QAAQ,IAAIA,QAAQ,CAACgB,IAAT,EADJ,EAEbD,IAFa,CAERE,MAAM,IAAIA,MAFF,EAGbC,KAHa,CAGPC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB,CAHF,CAAhB;EAKA,OAAOjB,IAAI,CAACC,KAAL,CAAWU,GAAX,CAAP,CAjB+B,CAiBH;AAC/B;;AAED,SAAQd,SAAR,EAAmBM,YAAnB"},"metadata":{},"sourceType":"module"}